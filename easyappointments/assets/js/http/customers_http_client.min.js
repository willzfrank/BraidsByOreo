"use strict";

/* ----------------------------------------------------------------------------
 * Easy!Appointments - Online Appointment Scheduler
 *
 * @package     EasyAppointments
 * @author      A.Tselegidis <alextselegidis@gmail.com>
 * @copyright   Copyright (c) Alex Tselegidis
 * @license     https://opensource.org/licenses/GPL-3.0 - GPLv3
 * @link        https://easyappointments.org
 * @since       v1.5.0
 * ---------------------------------------------------------------------------- */

/**
 * Customers HTTP client.
 *
 * This module implements the customers related HTTP requests.
 */
App.Http.Customers = function () {
  /**
   * Save (create or update) a customer.
   *
   * @param {Object} customer
   *
   * @return {Object}
   */
  function save(customer) {
    return customer.id ? update(customer) : create(customer);
  }
  /**
   * Create a customer.
   *
   * @param {Object} customer
   *
   * @return {Object}
   */


  function create(customer) {
    var url = App.Utils.Url.siteUrl('customers/create');
    var data = {
      csrf_token: vars('csrf_token'),
      customer: customer
    };
    return $.post(url, data);
  }
  /**
   * Update a customer.
   *
   * @param {Object} customer
   *
   * @return {Object}
   */


  function update(customer) {
    var url = App.Utils.Url.siteUrl('customers/update');
    var data = {
      csrf_token: vars('csrf_token'),
      customer: customer
    };
    return $.post(url, data);
  }
  /**
   * Delete a customer.
   *
   * @param {Number} customerId
   *
   * @return {Object}
   */


  function destroy(customerId) {
    var url = App.Utils.Url.siteUrl('customers/destroy');
    var data = {
      csrf_token: vars('csrf_token'),
      customer_id: customerId
    };
    return $.post(url, data);
  }
  /**
   * Search customers by keyword.
   *
   * @param {String} keyword
   * @param {Number} [limit]
   * @param {Number} [offset]
   * @param {String} [orderBy]
   *
   * @return {Object}
   */


  function search(keyword) {
    var limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    var orderBy = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
    var url = App.Utils.Url.siteUrl('customers/search');
    var data = {
      csrf_token: vars('csrf_token'),
      keyword: keyword,
      limit: limit,
      offset: offset,
      order_by: orderBy
    };
    return $.post(url, data);
  }
  /**
   * Find a customer.
   *
   * @param {Number} customerId
   *
   * @return {Object}
   */


  function find(customerId) {
    var url = App.Utils.Url.siteUrl('customers/find');
    var data = {
      csrf_token: vars('csrf_token'),
      customer_id: customerId
    };
    return $.post(url, data);
  }

  return {
    save: save,
    create: create,
    update: update,
    destroy: destroy,
    search: search,
    find: find
  };
}();