"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/* ----------------------------------------------------------------------------
 * Easy!Appointments - Online Appointment Scheduler
 *
 * @package     EasyAppointments
 * @author      A.Tselegidis <alextselegidis@gmail.com>
 * @copyright   Copyright (c) Alex Tselegidis
 * @license     https://opensource.org/licenses/GPL-3.0 - GPLv3
 * @link        https://easyappointments.org
 * @since       v1.5.0
 * ---------------------------------------------------------------------------- */

/**
 * Booking HTTP client.
 *
 * This module implements the booking related HTTP requests.
 *
 * Old Name: FrontendBookApi
 */
App.Http.Booking = function () {
  var $selectService = $('#select-service');
  var $selectProvider = $('#select-provider');
  var $availableHours = $('#available-hours');
  var $captchaHint = $('#captcha-hint');
  var $captchaTitle = $('.captcha-title');
  var unavailabilityDatesBackup;
  var selectedDateStringBackup;
  var processingUnavailabilities = false;
  /**
   * Get Available Hours
   *
   * This function makes an AJAX call and returns the available hours for the selected service,
   * provider and date.
   *
   * @param {String} selectedDate The selected date of the available hours we need.
   */

  function getAvailableHours(selectedDate) {
    $availableHours.empty(); // Find the selected service duration (it is going to be send within the "data" object).

    var serviceId = $selectService.val(); // Default value of duration (in minutes).

    var serviceDuration = 15;
    var service = vars('available_services').find(function (availableService) {
      return Number(availableService.id) === Number(serviceId);
    });

    if (service) {
      serviceDuration = service.duration;
    } // If the manage mode is true then the appointment's start date should return as available too.


    var appointmentId = App.Pages.Booking.manageMode ? vars('appointment_data').id : null; // Make ajax post request and get the available hours.

    var url = App.Utils.Url.siteUrl('booking/get_available_hours');
    var data = {
      csrf_token: vars('csrf_token'),
      service_id: $selectService.val(),
      provider_id: $selectProvider.val(),
      selected_date: selectedDate,
      service_duration: serviceDuration,
      manage_mode: App.Pages.Booking.manageMode,
      appointment_id: appointmentId
    };
    $.post(url, data).done(function (response) {
      // The response contains the available hours for the selected provider and service. Fill the available
      // hours div with response data.
      if (response.length > 0) {
        var providerId = $selectProvider.val();

        if (providerId === 'any-provider') {
          var _iterator = _createForOfIteratorHelper(vars('available_providers')),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var availableProvider = _step.value;

              if (availableProvider.services.indexOf(Number(serviceId)) !== -1) {
                providerId = availableProvider.id; // Use first available provider.

                break;
              }
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        }

        var provider = vars('available_providers').find(function (availableProvider) {
          return Number(providerId) === Number(availableProvider.id);
        });

        if (!provider) {
          throw new Error('Could not find provider.');
        }

        var providerTimezone = provider.timezone;
        var selectedTimezone = $('#select-timezone').val();
        var timeFormat = vars('time_format') === 'regular' ? 'h:mm a' : 'HH:mm';
        response.forEach(function (availableHour) {
          var availableHourMoment = moment.tz(selectedDate + ' ' + availableHour + ':00', providerTimezone).tz(selectedTimezone);

          if (availableHourMoment.format('YYYY-MM-DD') !== selectedDate) {
            return; // Due to the selected timezone the available hour belongs to another date.
          }

          $availableHours.append($('<button/>', {
            'class': 'btn btn-outline-secondary w-100 shadow-none available-hour',
            'data': {
              'value': availableHour
            },
            'text': availableHourMoment.format(timeFormat)
          }));
        });

        if (App.Pages.Booking.manageMode) {
          // Set the appointment's start time as the default selection.
          $('.available-hour').removeClass('selected-hour').filter(function (index, availableHourEl) {
            return $(availableHourEl).text() === moment(vars('appointment_data').start_datetime).format(timeFormat);
          }).addClass('selected-hour');
        } else {
          // Set the first available hour as the default selection.
          $('.available-hour:eq(0)').addClass('selected-hour');
        }

        App.Pages.Booking.updateConfirmFrame();
      }

      if (!$availableHours.find('.available-hour').length) {
        $availableHours.text(lang('no_available_hours'));
      }
    });
  }
  /**
   * Register an appointment to the database.
   *
   * This method will make an ajax call to the appointments controller that will register
   * the appointment to the database.
   */


  function registerAppointment() {
    var $captchaText = $('.captcha-text');

    if ($captchaText.length > 0) {
      $captchaText.removeClass('is-invalid');

      if ($captchaText.val() === '') {
        $captchaText.addClass('is-invalid');
        return;
      }
    }

    var formData = JSON.parse($('input[name="post_data"]').val());
    var data = {
      csrf_token: vars('csrf_token'),
      post_data: formData
    };

    if ($captchaText.length > 0) {
      data.captcha = $captchaText.val();
    }

    if (vars('manage_mode')) {
      data.exclude_appointment_id = vars('appointment_data').id;
    }

    var url = App.Utils.Url.siteUrl('booking/register');
    var $layer = $('<div/>');
    $.ajax({
      url: url,
      method: 'post',
      data: data,
      dataType: 'json',
      beforeSend: function beforeSend() {
        $layer.appendTo('body').css({
          background: 'white',
          position: 'fixed',
          top: '0',
          left: '0',
          height: '100vh',
          width: '100vw',
          opacity: '0.5'
        });
      }
    }).done(function (response) {
      if (response.captcha_verification === false) {
        $captchaHint.text(lang('captcha_is_wrong')).fadeTo(400, 1);
        setTimeout(function () {
          $captchaHint.fadeTo(400, 0);
        }, 3000);
        $captchaTitle.find('button').trigger('click');
        $captchaText.addClass('is-invalid');
        return false;
      }

      window.location.href = App.Utils.Url.siteUrl('booking_confirmation/of/' + response.appointment_hash);
    }).fail(function () {
      $captchaTitle.find('button').trigger('click');
    }).always(function () {
      $layer.remove();
    });
  }
  /**
   * Get the unavailability dates of a provider.
   *
   * This method will fetch the unavailability dates of the selected provider and service and then it will
   * select the first available date (if any). It uses the "FrontendBookApi.getAvailableHours" method to
   * fetch the appointment* hours of the selected date.
   *
   * @param {Number} providerId The selected provider ID.
   * @param {Number} serviceId The selected service ID.
   * @param {String} selectedDateString Y-m-d value of the selected date.
   */


  function getUnavailabilityDates(providerId, serviceId, selectedDateString) {
    if (processingUnavailabilities) {
      return;
    }

    if (!providerId || !serviceId) {
      return;
    }

    var appointmentId = App.Pages.Booking.manageMode ? vars('appointment_data').id : null;
    var url = App.Utils.Url.siteUrl('booking/get_unavailability_dates');
    var data = {
      provider_id: providerId,
      service_id: serviceId,
      selected_date: encodeURIComponent(selectedDateString),
      csrf_token: vars('csrf_token'),
      manage_mode: App.Pages.Booking.manageMode,
      appointment_id: appointmentId
    };
    $.ajax({
      url: url,
      type: 'GET',
      data: data,
      dataType: 'json'
    }).done(function (response) {
      unavailabilityDatesBackup = response;
      selectedDateStringBackup = selectedDateString;
      applyUnavailabilityDates(response, selectedDateString, true);
    });
  }

  function applyPreviousUnavailabilityDates() {
    applyUnavailabilityDates(unavailabilityDatesBackup, selectedDateStringBackup);
  }

  function applyUnavailabilityDates(unavailabilityDates, selectedDateString, setDate) {
    setDate = setDate || false;
    processingUnavailabilities = true; // Select first enabled date.

    var selectedDateMoment = moment(selectedDateString);
    var selectedDate = selectedDateMoment.toDate();
    var numberOfDays = selectedDateMoment.daysInMonth();

    if (setDate && !vars('manage_mode')) {
      for (var i = 1; i <= numberOfDays; i++) {
        var currentDate = new Date(selectedDate.getFullYear(), selectedDate.getMonth(), i);

        if (unavailabilityDates.indexOf(moment(currentDate).format('YYYY-MM-DD')) === -1) {
          $('#select-date').datepicker('setDate', currentDate);
          getAvailableHours(moment(currentDate).format('YYYY-MM-DD'));
          break;
        }
      }
    } // If all the days are unavailability then hide the appointments hours.


    if (unavailabilityDates.length === numberOfDays) {
      $availableHours.text(lang('no_available_hours'));
    } // Grey out unavailability dates.


    $('#select-date .ui-datepicker-calendar td:not(.ui-datepicker-other-month)').each(function (index, td) {
      selectedDateMoment.set({
        day: index + 1
      });

      if (unavailabilityDates.indexOf(selectedDateMoment.format('YYYY-MM-DD')) !== -1) {
        $(td).addClass('ui-datepicker-unselectable ui-state-disabled');
      }
    });
    processingUnavailabilities = false;
  }
  /**
   * Delete personal information.
   *
   * @param {Number} customerToken Customer unique token.
   */


  function deletePersonalInformation(customerToken) {
    var url = App.Utils.Url.siteUrl('privacy/delete_personal_information');
    var data = {
      csrf_token: vars('csrf_token'),
      customer_token: customerToken
    };
    $.post(url, data).done(function () {
      window.location.href = vars('base_url');
    });
  }

  return {
    registerAppointment: registerAppointment,
    getAvailableHours: getAvailableHours,
    getUnavailabilityDates: getUnavailabilityDates,
    applyPreviousUnavailabilityDates: applyPreviousUnavailabilityDates,
    deletePersonalInformation: deletePersonalInformation
  };
}();