"use strict";

/* ----------------------------------------------------------------------------
 * Easy!Appointments - Online Appointment Scheduler
 *
 * @package     EasyAppointments
 * @author      A.Tselegidis <alextselegidis@gmail.com>
 * @copyright   Copyright (c) Alex Tselegidis
 * @license     https://opensource.org/licenses/GPL-3.0 - GPLv3
 * @link        https://easyappointments.org
 * @since       v1.5.0
 * ---------------------------------------------------------------------------- */

/**
 * Appointments modal component.
 *
 * This module implements the appointments modal functionality.
 *
 * Old Name: BackendCalendarAppointmentsModal
 */
App.Components.AppointmentsModal = function () {
  var $appointmentsModal = $('#appointments-modal');
  var $startDatetime = $('#start-datetime');
  var $endDatetime = $('#end-datetime');
  var $filterExistingCustomers = $('#filter-existing-customers');
  var $customerId = $('#customer-id');
  var $firstName = $('#first-name');
  var $lastName = $('#last-name');
  var $email = $('#email');
  var $phoneNumber = $('#phone-number');
  var $address = $('#address');
  var $city = $('#city');
  var $zipCode = $('#zip-code');
  var $language = $('#language');
  var $timezone = $('#timezone');
  var $customerNotes = $('#customer-notes');
  var $selectCustomer = $('#select-customer');
  var $saveAppointment = $('#save-appointment');
  var $appointmentId = $('#appointment-id');
  var $appointmentLocation = $('#appointment-location');
  var $appointmentColor = $('#appointment-color');
  var $appointmentNotes = $('#appointment-notes');
  var $reloadAppointments = $('#reload-appointments');
  var $selectFilterItem = $('#select-filter-item');
  var $selectService = $('#select-service');
  var $selectProvider = $('#select-provider');
  var $insertAppointment = $('#insert-appointment');
  var $existingCustomersList = $('#existing-customers-list');
  var $newCustomer = $('#new-customer');
  /**
   * Update the displayed timezone.
   */

  function updateTimezone() {
    var providerId = $selectProvider.val();
    var provider = vars('available_providers').find(function (availableProvider) {
      return Number(availableProvider.id) === Number(providerId);
    });

    if (provider && provider.timezone) {
      $('.provider-timezone').text(vars('timezones')[provider.timezone]);
    }
  }
  /**
   * Add the component event listeners.
   */


  function addEventListeners() {
    /**
     * Event: Manage Appointments Dialog Save Button "Click"
     *
     * Stores the appointment changes or inserts a new appointment depending on the dialog mode.
     */
    $saveAppointment.on('click', function () {
      // Before doing anything the appointment data need to be validated.
      if (!validateAppointmentForm()) {
        return;
      } // ID must exist on the object in order for the model to update the record and not to perform
      // an insert operation.


      var startDatetime = moment($startDatetime.datetimepicker('getDate')).format('YYYY-MM-DD HH:mm:ss');
      var endDatetime = moment($endDatetime.datetimepicker('getDate')).format('YYYY-MM-DD HH:mm:ss');
      var appointment = {
        id_services: $selectService.val(),
        id_users_provider: $selectProvider.val(),
        start_datetime: startDatetime,
        end_datetime: endDatetime,
        location: $appointmentLocation.val(),
        color: App.Components.ColorSelection.getColor($appointmentColor),
        notes: $appointmentNotes.val(),
        is_unavailability: Number(false)
      };

      if ($appointmentId.val() !== '') {
        // Set the id value, only if we are editing an appointment.
        appointment.id = $appointmentId.val();
      }

      var customer = {
        first_name: $firstName.val(),
        last_name: $lastName.val(),
        email: $email.val(),
        phone_number: $phoneNumber.val(),
        address: $address.val(),
        city: $city.val(),
        zip_code: $zipCode.val(),
        language: $language.val(),
        timezone: $timezone.val(),
        notes: $customerNotes.val()
      };

      if ($customerId.val() !== '') {
        // Set the id value, only if we are editing an appointment.
        customer.id = $customerId.val();
        appointment.id_users_customer = customer.id;
      } // Define success callback.


      var successCallback = function successCallback() {
        // Display success message to the user.
        App.Layouts.Backend.displayNotification(lang('appointment_saved')); // Close the modal dialog and refresh the calendar appointments.

        $appointmentsModal.find('.alert').addClass('d-none');
        $appointmentsModal.modal('hide');
        $reloadAppointments.trigger('click');
      }; // Define error callback.


      var errorCallback = function errorCallback() {
        $appointmentsModal.find('.modal-message').text(lang('service_communication_error'));
        $appointmentsModal.find('.modal-message').addClass('alert-danger').removeClass('d-none');
        $appointmentsModal.find('.modal-body').scrollTop(0);
      }; // Save appointment data.


      App.Http.Calendar.saveAppointment(appointment, customer, successCallback, errorCallback);
    });
    /**
     * Event: Insert Appointment Button "Click"
     *
     * When the user presses this button, the manage appointment dialog opens and lets the user create a new
     * appointment.
     */

    $insertAppointment.on('click', function () {
      $('.popover').remove();
      resetModal(); // Set the selected filter item and find the next appointment time as the default modal values.

      if ($selectFilterItem.find('option:selected').attr('type') === 'provider') {
        var providerId = $('#select-filter-item').val();
        var providers = vars('available_providers').filter(function (provider) {
          return Number(provider.id) === Number(providerId);
        });

        if (providers.length) {
          $selectService.val(providers[0].services[0]).trigger('change');
          $selectProvider.val(providerId);
        }
      } else if ($selectFilterItem.find('option:selected').attr('type') === 'service') {
        $selectService.find('option[value="' + $selectFilterItem.val() + '"]').prop('selected', true);
      } else {
        $selectService.find('option:first').prop('selected', true).trigger('change');
      }

      var serviceId = $selectService.val();
      var service = vars('available_services').find(function (availableService) {
        return Number(availableService.id) === Number(serviceId);
      });
      var duration = service ? service.duration : 60;
      var startMoment = moment();
      var currentMin = parseInt(startMoment.format('mm'));

      if (currentMin > 0 && currentMin < 15) {
        startMoment.set({
          minutes: 15
        });
      } else if (currentMin > 15 && currentMin < 30) {
        startMoment.set({
          minutes: 30
        });
      } else if (currentMin > 30 && currentMin < 45) {
        startMoment.set({
          minutes: 45
        });
      } else {
        startMoment.add(1, 'hour').set({
          minutes: 0
        });
      }

      $startDatetime.val(App.Utils.Date.format(startMoment.toDate(), vars('date_format'), vars('time_format'), true));
      $endDatetime.val(App.Utils.Date.format(startMoment.add(duration, 'minutes').toDate(), vars('date_format'), vars('time_format'), true)); // Display modal form.

      $appointmentsModal.find('.modal-header h3').text(lang('new_appointment_title'));
      $appointmentsModal.modal('show');
    });
    /**
     * Event: Pick Existing Customer Button "Click"
     *
     * @param {jQuery.Event} event
     */

    $selectCustomer.on('click', function (event) {
      if (!$existingCustomersList.is(':visible')) {
        $(event.target).find('span').text(lang('hide'));
        $existingCustomersList.empty();
        $existingCustomersList.slideDown('slow');
        $filterExistingCustomers.fadeIn('slow').val('');
        vars('customers').forEach(function (customer) {
          $('<div/>', {
            'data-id': customer.id,
            'text': customer.first_name + ' ' + customer.last_name
          }).appendTo($existingCustomersList);
        });
      } else {
        $existingCustomersList.slideUp('slow');
        $filterExistingCustomers.fadeOut('slow');
        $(event.target).find('span').text(lang('select'));
      }
    });
    /**
     * Event: Select Existing Customer From List "Click"
     *
     * @param {jQuery.Event}
     */

    $appointmentsModal.on('click', '#existing-customers-list div', function (event) {
      var customerId = $(event.target).attr('data-id');
      var customer = vars('customers').find(function (customer) {
        return Number(customer.id) === Number(customerId);
      });

      if (customer) {
        $customerId.val(customer.id);
        $firstName.val(customer.first_name);
        $lastName.val(customer.last_name);
        $email.val(customer.email);
        $phoneNumber.val(customer.phone_number);
        $address.val(customer.address);
        $city.val(customer.city);
        $zipCode.val(customer.zip_code);
        $language.val(customer.language);
        $timezone.val(customer.timezone);
        $customerNotes.val(customer.notes);
      }

      $selectCustomer.trigger('click'); // Hide the list.
    });
    var filterExistingCustomersTimeout = null;
    /**
     * Event: Filter Existing Customers "Change"
     *
     * @param {jQuery.Event}
     */

    $filterExistingCustomers.on('keyup', function (event) {
      if (filterExistingCustomersTimeout) {
        clearTimeout(filterExistingCustomersTimeout);
      }

      var keyword = $(event.target).val().toLowerCase();
      filterExistingCustomersTimeout = setTimeout(function () {
        $('#loading').css('visibility', 'hidden');
        App.Http.Customers.search(keyword, 50).done(function (response) {
          $existingCustomersList.empty();
          response.forEach(function (customer) {
            $('<div/>', {
              'data-id': customer.id,
              'text': customer.first_name + ' ' + customer.last_name
            }).appendTo($existingCustomersList); // Verify if this customer is on the old customer list.

            var result = vars('customers').filter(function (existingCustomer) {
              return Number(existingCustomer.id) === Number(customer.id);
            }); // Add it to the customer list.

            if (!result.length) {
              vars('customers').push(customer);
            }
          });
        }).fail(function () {
          // If there is any error on the request, search by the local client database.
          $existingCustomersList.empty();
          vars('customers').forEach(function (customer) {
            if (customer.first_name.toLowerCase().indexOf(keyword) !== -1 || customer.last_name.toLowerCase().indexOf(keyword) !== -1 || customer.email.toLowerCase().indexOf(keyword) !== -1 || customer.phone_number.toLowerCase().indexOf(keyword) !== -1 || customer.address.toLowerCase().indexOf(keyword) !== -1 || customer.city.toLowerCase().indexOf(keyword) !== -1 || customer.zip_code.toLowerCase().indexOf(keyword) !== -1 || customer.notes.toLowerCase().indexOf(keyword) !== -1) {
              $('<div/>', {
                'data-id': customer.id,
                'text': customer.first_name + ' ' + customer.last_name
              }).appendTo($existingCustomersList);
            }
          });
        }).always(function () {
          $('#loading').css('visibility', '');
        });
      }, 1000);
    });
    /**
     * Event: Selected Service "Change"
     *
     * When the user clicks on a service, its available providers should become visible. We also need to
     * update the start and end time of the appointment.
     */

    $selectService.on('change', function () {
      var serviceId = $selectService.val();
      $selectProvider.empty(); // Automatically update the service duration.

      var service = vars('available_services').find(function (availableService) {
        return Number(availableService.id) === Number(serviceId);
      });
      var duration = service ? service.duration : 60;
      var start = $startDatetime.datetimepicker('getDate');
      $endDatetime.datetimepicker('setDate', new Date(start.getTime() + duration * 60000)); // Update the providers select box.

      vars('available_providers').forEach(function (provider) {
        provider.services.forEach(function (providerServiceId) {
          if (vars('role_slug') === App.Layouts.Backend.DB_SLUG_PROVIDER && Number(provider.id) !== vars('user_id')) {
            return; // continue
          }

          if (vars('role_slug') === App.Layouts.Backend.DB_SLUG_SECRETARY && vars('secretary_providers').indexOf(provider.id) === -1) {
            return; // continue
          } // If the current provider is able to provide the selected service, add him to the list box.


          if (Number(providerServiceId) === Number(serviceId)) {
            $selectProvider.append(new Option(provider.first_name + ' ' + provider.last_name, provider.id));
          }
        });
      });
    });
    /**
     * Event: Provider "Change"
     */

    $selectProvider.on('change', function () {
      updateTimezone();
    });
    /**
     * Event: Enter New Customer Button "Click"
     */

    $newCustomer.on('click', function () {
      $customerId.val('');
      $firstName.val('');
      $lastName.val('');
      $email.val('');
      $phoneNumber.val('');
      $address.val('');
      $city.val('');
      $zipCode.val('');
      $language.val('english');
      $timezone.val('UTC');
      $customerNotes.val('');
    });
  }
  /**
   * Reset Appointment Dialog
   *
   * This method resets the manage appointment dialog modal to its initial state. After that you can make
   * any modification might be necessary in order to bring the dialog to the desired state.
   */


  function resetModal() {
    // Empty form fields.
    $appointmentsModal.find('input, textarea').val('');
    $appointmentsModal.find('.modal-message').fadeOut();
    $language.val('english');
    $timezone.val('UTC'); // Reset color.

    $appointmentColor.find('.color-selection-option:first').trigger('click'); // Prepare service and provider select boxes.

    $selectService.val($selectService.eq(0).attr('value')); // Fill the providers list box with providers that can serve the appointment's service and then select the
    // user's provider.

    $selectProvider.empty();
    vars('available_providers').forEach(function (provider) {
      var serviceId = $selectService.val();
      var canProvideService = provider.services.filter(function (providerServiceId) {
        return Number(providerServiceId) === Number(serviceId);
      }).length > 0;

      if (canProvideService) {
        // Add the provider to the list box.
        $selectProvider.append(new Option(provider.first_name + ' ' + provider.last_name, provider.id));
      }
    }); // Close existing customers-filter frame.

    $existingCustomersList.slideUp('slow');
    $filterExistingCustomers.fadeOut('slow');
    $selectCustomer.find('span').text(lang('select')); // Setup start and datetimepickers.
    // Get the selected service duration. It will be needed in order to calculate the appointment end datetime.

    var serviceId = $selectService.val();
    var service = vars('available_services').forEach(function (service) {
      return Number(service.id) === Number(serviceId);
    });
    var duration = service ? service.duration : 0;
    var startDatetime = new Date();
    var endDatetime = moment().add(duration, 'minutes').toDate();
    var dateFormat;

    switch (vars('date_format')) {
      case 'DMY':
        dateFormat = 'dd/mm/yy';
        break;

      case 'MDY':
        dateFormat = 'mm/dd/yy';
        break;

      case 'YMD':
        dateFormat = 'yy/mm/dd';
        break;

      default:
        throw new Error('Invalid date format value.');
    }

    var firstWeekDay = vars('first_weekday');
    var firstWeekDayNumber = App.Utils.Date.getWeekdayId(firstWeekDay);
    $startDatetime.datetimepicker({
      dateFormat: dateFormat,
      timeFormat: vars('time_format') === 'regular' ? 'h:mm tt' : 'HH:mm',
      // Translation
      dayNames: [lang('sunday'), lang('monday'), lang('tuesday'), lang('wednesday'), lang('thursday'), lang('friday'), lang('saturday')],
      dayNamesShort: [lang('sunday').substr(0, 3), lang('monday').substr(0, 3), lang('tuesday').substr(0, 3), lang('wednesday').substr(0, 3), lang('thursday').substr(0, 3), lang('friday').substr(0, 3), lang('saturday').substr(0, 3)],
      dayNamesMin: [lang('sunday').substr(0, 2), lang('monday').substr(0, 2), lang('tuesday').substr(0, 2), lang('wednesday').substr(0, 2), lang('thursday').substr(0, 2), lang('friday').substr(0, 2), lang('saturday').substr(0, 2)],
      monthNames: [lang('january'), lang('february'), lang('march'), lang('april'), lang('may'), lang('june'), lang('july'), lang('august'), lang('september'), lang('october'), lang('november'), lang('december')],
      prevText: lang('previous'),
      nextText: lang('next'),
      currentText: lang('now'),
      closeText: lang('close'),
      timeOnlyTitle: lang('select_time'),
      timeText: lang('time'),
      hourText: lang('hour'),
      minuteText: lang('minutes'),
      firstDay: firstWeekDayNumber,
      onClose: function onClose() {
        var serviceId = $selectService.val(); // Automatically update the #end-datetime DateTimePicker based on service duration.

        var service = vars('available_services').find(function (availableService) {
          return Number(availableService.id) === Number(serviceId);
        });
        var start = $startDatetime.datetimepicker('getDate');
        $endDatetime.datetimepicker('setDate', new Date(start.getTime() + service.duration * 60000));
      }
    });
    $startDatetime.datetimepicker('setDate', startDatetime);
    $endDatetime.datetimepicker({
      dateFormat: dateFormat,
      timeFormat: vars('time_format') === 'regular' ? 'h:mm tt' : 'HH:mm',
      // Translation
      dayNames: [lang('sunday'), lang('monday'), lang('tuesday'), lang('wednesday'), lang('thursday'), lang('friday'), lang('saturday')],
      dayNamesShort: [lang('sunday').substr(0, 3), lang('monday').substr(0, 3), lang('tuesday').substr(0, 3), lang('wednesday').substr(0, 3), lang('thursday').substr(0, 3), lang('friday').substr(0, 3), lang('saturday').substr(0, 3)],
      dayNamesMin: [lang('sunday').substr(0, 2), lang('monday').substr(0, 2), lang('tuesday').substr(0, 2), lang('wednesday').substr(0, 2), lang('thursday').substr(0, 2), lang('friday').substr(0, 2), lang('saturday').substr(0, 2)],
      monthNames: [lang('january'), lang('february'), lang('march'), lang('april'), lang('may'), lang('june'), lang('july'), lang('august'), lang('september'), lang('october'), lang('november'), lang('december')],
      prevText: lang('previous'),
      nextText: lang('next'),
      currentText: lang('now'),
      closeText: lang('close'),
      timeOnlyTitle: lang('select_time'),
      timeText: lang('time'),
      hourText: lang('hour'),
      minuteText: lang('minutes'),
      firstDay: firstWeekDayNumber
    });
    $endDatetime.datetimepicker('setDate', endDatetime);
  }
  /**
   * Validate the manage appointment dialog data.
   *
   * Validation checks need to run every time the data are going to be saved.
   *
   * @return {Boolean} Returns the validation result.
   */


  function validateAppointmentForm() {
    // Reset previous validation css formatting.
    $appointmentsModal.find('.is-invalid').removeClass('is-invalid');
    $appointmentsModal.find('.modal-message').addClass('d-none');

    try {
      // Check required fields.
      var missingRequiredField = false;
      $appointmentsModal.find('.required').each(function (index, requiredField) {
        if ($(requiredField).val() === '' || $(requiredField).val() === null) {
          $(requiredField).addClass('is-invalid');
          missingRequiredField = true;
        }
      });

      if (missingRequiredField) {
        throw new Error(lang('fields_are_required'));
      } // Check email address.


      if (!App.Utils.Validation.email($appointmentsModal.find('#email').val())) {
        $appointmentsModal.find('#email').addClass('is-invalid');
        throw new Error(lang('invalid_email'));
      } // Check appointment start and end time.


      var start = $startDatetime.datetimepicker('getDate');
      var end = $endDatetime.datetimepicker('getDate');

      if (start > end) {
        $startDatetime.addClass('is-invalid');
        $endDatetime.addClass('is-invalid');
        throw new Error(lang('start_date_before_end_error'));
      }

      return true;
    } catch (error) {
      $appointmentsModal.find('.modal-message').addClass('alert-danger').text(error.message).removeClass('d-none');
      return false;
    }
  }
  /**
   * Initialize the module.
   */


  function initialize() {
    addEventListeners();
  }

  document.addEventListener('DOMContentLoaded', initialize);
  return {
    resetModal: resetModal,
    initialize: initialize
  };
}();