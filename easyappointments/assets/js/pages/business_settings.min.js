"use strict";

/* ----------------------------------------------------------------------------
 * Easy!Appointments - Online Appointment Scheduler
 *
 * @package     EasyAppointments
 * @author      A.Tselegidis <alextselegidis@gmail.com>
 * @copyright   Copyright (c) Alex Tselegidis
 * @license     https://opensource.org/licenses/GPL-3.0 - GPLv3
 * @link        https://easyappointments.org
 * @since       v1.5.0
 * ---------------------------------------------------------------------------- */

/**
 * Business settings page.
 *
 * This module implements the functionality of the business settings page.
 */
App.Pages.BusinessSettings = function () {
  var $saveSettings = $('#save-settings');
  var $applyGlobalWorkingPlan = $('#apply-global-working-plan');
  var workingPlanManager = null;
  /**
   * Check if the form has invalid values.
   *
   * @return {Boolean}
   */

  function isInvalid() {
    try {
      $('#business-settings .is-invalid').removeClass('is-invalid'); // Validate required fields.

      var missingRequiredFields = false;
      $('#business-settings .required').each(function (index, requiredField) {
        var $requiredField = $(requiredField);

        if (!$requiredField.val()) {
          $requiredField.addClass('is-invalid');
          missingRequiredFields = true;
        }
      });

      if (missingRequiredFields) {
        throw new Error(lang('fields_are_required'));
      }

      return false;
    } catch (error) {
      App.Layouts.Backend.displayNotification(error.message);
      return true;
    }
  }

  function deserialize(businessSettings) {
    businessSettings.forEach(function (businessSetting) {
      $('[data-field="' + businessSetting.name + '"]').val(businessSetting.value);
    });
  }

  function serialize() {
    var businessSettings = [];
    $('[data-field]').each(function (index, field) {
      var $field = $(field);
      businessSettings.push({
        name: $field.data('field'),
        value: $field.val()
      });
    });
    var workingPlan = workingPlanManager.get();
    businessSettings.push({
      name: 'company_working_plan',
      value: JSON.stringify(workingPlan)
    });
    return businessSettings;
  }
  /**
   * Save the account information.
   */


  function onSaveSettingsClick() {
    if (isInvalid()) {
      App.Layouts.Backend.displayNotification(lang('settings_are_invalid'));
      return;
    }

    var businessSettings = serialize();
    App.Http.BusinessSettings.save(businessSettings).done(function () {
      App.Layouts.Backend.displayNotification(lang('settings_saved'));
    });
  }
  /**
   * Save the global working plan information.
   */


  function onApplyGlobalWorkingPlan() {
    var buttons = [{
      text: lang('cancel'),
      click: function click() {
        $('#message-box').dialog('close');
      }
    }, {
      text: 'OK',
      click: function click() {
        var workingPlan = workingPlanManager.get();
        App.Http.BusinessSettings.applyGlobalWorkingPlan(workingPlan).done(function () {
          App.Layouts.Backend.displayNotification(lang('working_plans_got_updated'));
        }).always(function () {
          $('#message-box').dialog('close');
        });
      }
    }];
    App.Utils.Message.show(lang('working_plan'), lang('overwrite_existing_working_plans'), buttons);
  }
  /**
   * Initialize the module.
   */


  function initialize() {
    var businessSettings = vars('business_settings');
    deserialize(businessSettings);
    var companyWorkingPlan = {};
    vars('business_settings').forEach(function (businessSetting) {
      if (businessSetting.name === 'company_working_plan') {
        companyWorkingPlan = JSON.parse(businessSetting.value);
      }
    });
    workingPlanManager = new App.Utils.WorkingPlan();
    workingPlanManager.setup(companyWorkingPlan);
    workingPlanManager.timepickers(false);
    workingPlanManager.addEventListeners();
    $saveSettings.on('click', onSaveSettingsClick);
    $applyGlobalWorkingPlan.on('click', onApplyGlobalWorkingPlan);
    App.Layouts.Backend.placeFooterToBottom();
  }

  document.addEventListener('DOMContentLoaded', initialize);
  return {};
}();