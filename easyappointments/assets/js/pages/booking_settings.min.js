"use strict";

/* ----------------------------------------------------------------------------
 * Easy!Appointments - Online Appointment Scheduler
 *
 * @package     EasyAppointments
 * @author      A.Tselegidis <alextselegidis@gmail.com>
 * @copyright   Copyright (c) Alex Tselegidis
 * @license     https://opensource.org/licenses/GPL-3.0 - GPLv3
 * @link        https://easyappointments.org
 * @since       v1.5.0
 * ---------------------------------------------------------------------------- */

/**
 * Booking settings page.
 *
 * This module implements the functionality of the booking settings page.
 */
App.Pages.BookingSettings = function () {
  var $bookingSettings = $('#booking-settings');
  var $saveSettings = $('#save-settings');
  var $disableBooking = $('#disable-booking');
  var $disableBookingMessage = $('#disable-booking-message');
  /**
   * Check if the form has invalid values.
   *
   * @return {Boolean}
   */

  function isInvalid() {
    try {
      $('#booking-settings .is-invalid').removeClass('is-invalid'); // Validate required fields.

      var missingRequiredFields = false;
      $('#booking-settings .required').each(function (index, requiredField) {
        var $requiredField = $(requiredField);

        if (!$requiredField.val()) {
          $requiredField.addClass('is-invalid');
          missingRequiredFields = true;
        }
      });

      if (missingRequiredFields) {
        throw new Error(lang('fields_are_required'));
      }

      return false;
    } catch (error) {
      App.Layouts.Backend.displayNotification(error.message);
      return true;
    }
  }
  /**
   * Apply the booking settings into the page.
   *
   * @param {Object} bookingSettings
   */


  function deserialize(bookingSettings) {
    bookingSettings.forEach(function (bookingSetting) {
      if (bookingSetting.name === 'disable_booking_message') {
        $disableBookingMessage.trumbowyg('html', bookingSetting.value);
        return;
      }

      var $field = $('[data-field="' + bookingSetting.name + '"]');

      if ($field.is(':checkbox')) {
        $field.prop('checked', Boolean(Number(bookingSetting.value)));
      } else {
        $field.val(bookingSetting.value);
      }
    });
  }
  /**
   * Serialize the page values into an array.
   *
   * @returns {Array}
   */


  function serialize() {
    var bookingSettings = [];
    $('[data-field]').each(function (index, field) {
      var $field = $(field);
      bookingSettings.push({
        name: $field.data('field'),
        value: $field.is(':checkbox') ? Number($field.prop('checked')) : $field.val()
      });
    });
    bookingSettings.push({
      name: 'disable_booking_message',
      value: $disableBookingMessage.trumbowyg('html')
    });
    return bookingSettings;
  }
  /**
   * Update the UI based on the display switch state.
   *
   * @param {jQuery} $displaySwitch
   */


  function updateDisplaySwitch($displaySwitch) {
    var isChecked = $displaySwitch.prop('checked');
    var $formGroup = $displaySwitch.closest('.form-group');
    $formGroup.find('.require-switch').prop('disabled', !isChecked);
    $formGroup.find('.form-label, .form-control').toggleClass('opacity-25', !isChecked);

    if (!isChecked) {
      $formGroup.find('.require-switch').prop('checked', false);
      $formGroup.find('.text-danger').hide();
    }
  }
  /**
   * Update the UI based on the require switch state.
   *
   * @param {jQuery} $requireSwitch
   */


  function updateRequireSwitch($requireSwitch) {
    var isChecked = $requireSwitch.prop('checked');
    var $formGroup = $requireSwitch.closest('.form-group');
    $formGroup.find('.text-danger').toggle(isChecked);
  }
  /**
   * Update the UI based on the initial values.
   */


  function applyInitialState() {
    $bookingSettings.find('.display-switch').each(function (index, displaySwitchEl) {
      var $displaySwitch = $(displaySwitchEl);
      updateDisplaySwitch($displaySwitch);
    });
    $bookingSettings.find('.require-switch').each(function (index, requireSwitchEl) {
      var $requireSwitch = $(requireSwitchEl);
      updateRequireSwitch($requireSwitch);
    });
    $disableBookingMessage.closest('.form-group').prop('hidden', !$disableBooking.prop('checked'));
  }
  /**
   * Save the account information.
   */


  function onSaveSettingsClick() {
    if (isInvalid()) {
      App.Layouts.Backend.displayNotification(lang('settings_are_invalid'));
      return;
    }

    var bookingSettings = serialize();
    App.Http.BookingSettings.save(bookingSettings).done(function () {
      App.Layouts.Backend.displayNotification(lang('settings_saved'));
    });
  }
  /**
   * Update the UI.
   *
   * @param {jQuery} event
   */


  function onDisplaySwitchClick(event) {
    var $displaySwitch = $(event.target);
    updateDisplaySwitch($displaySwitch);
  }
  /**
   * Update the UI.
   *
   * @param {Event} event
   */


  function onRequireSwitchClick(event) {
    var $requireSwitch = $(event.target);
    updateRequireSwitch($requireSwitch);
  }
  /**
   * Toggle the message container.
   */


  function onDisableBookingClick() {
    $disableBookingMessage.closest('.form-group').prop('hidden', !$disableBooking.prop('checked'));
  }
  /**
   * Initialize the module.
   */


  function initialize() {
    var bookingSettings = vars('booking_settings');
    $saveSettings.on('click', onSaveSettingsClick);
    $disableBooking.on('click', onDisableBookingClick);
    $bookingSettings.on('click', '.display-switch', onDisplaySwitchClick).on('click', '.require-switch', onRequireSwitchClick);
    $disableBookingMessage.trumbowyg();
    deserialize(bookingSettings);
    applyInitialState();
    App.Layouts.Backend.placeFooterToBottom();
  }

  document.addEventListener('DOMContentLoaded', initialize);
  return {};
}();